INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (933, '下面对线程同步描述错误的是', 'A. Java中一般会使用同步方法或同步代码块实现线程同步操作\nB. 对于单例模式的java类，即使该类对象可暴露给不可信代码，使用同步方法可以正确进行线程同步\nC. 使用private final的锁对象更安全\nD. 同步方法与基于this引用的同步代码块使用的是相同的锁', 'B', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (934, '在一般情形下，仅仅忽略对回车换行的过滤(\\x0d, \\x0a)有可能会导致如下哪种安全问题：', 'A. 反序列化漏洞\nB. 日志注入\nC. json注入共计\nD. 缓冲区溢出', 'B', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (935, '下面的代码实现中，对xml内部实体扩展没有防护作用的是：\n①DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\nDocumentBuilder db = dbf.newDocumentBuilder();\ndb.parse(inStream);\n②DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setFeature(\"http://oracle.com/xml/jaxp/properties/entityExpansionLimit\", \"200\");\nDocumentBuilder db = dbf.newDocumentBuilder();\ndb.parse(inStream);\n③System.setProperties(\"entityExpansionLimit\", \"200\");\nDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\nDocumentBuilder db = dbf.newDocumentBuilder();\ndb.parse(inStream);\n④SAXParserFactory factory = SAXParserFactory.newInstance();\nfactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\nfactory.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\nSAXParser saxParser = factory.newSAXParser();\nsaxParser.parse(inStream, defaultHandler);', 'A. ③\nB. ④\nC. ①\nD. ②', 'B', '解析：4是防止外部实体攻击的\nhttp://3ms.huawei.com/km/blogs/details/5896699', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (936, '下面对java中创建的具有输出流或错误流的进程的处理，正确的是？', 'A.\nRuntime rt = Runtime.getRuntime();\nProcess proc = rt.exec(\"notemaker\");\nStreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), System.err);\nerrorGobbler.start();\nint exitVal = proc.waitFor();\nB.\nRuntime rt = Runtime.getRuntime();\nProcess proc = rt.exec(\"notemaker\");\nStreamGobbler errorGobbler = new StreamGobbler(proc.getErrorStream(), System.err);\nStreamGobbler outputGobbler = new StreamGobbler(proc.getInputStream(), System.out);\nerrorGobbler.start();\noutputGobbler.start();\nint exitVal = proc.waitFor();\nC.\nRuntime rt = Runtime.getRuntime();\nProcess proc = rt.exec(\"notemaker\");\nint exitVal = proc.exitValue();\nD.\nRuntime rt = Runtime.getRuntime();\nProcess proc = rt.exec(\"notemaker\");\nint exitVal = proc.waitFor();', 'B', '解析：\nhttp://3ms.huawei.com/km/blogs/details/5896699\n规则6.3 防止让外部进程阻塞在输入输出流上', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (937, '就以下程序说法正确的是：\npublic class Sys extends Thread {\nboolean stop = false;\npublic static void main(String[] args) throws interruptedException {\nSys thread = new Sys();\nthread.start();\nThread.sleep(3000)\nthread.interrupt();\nThread.sleep(3000)\nSystem.out.println(\"Stopping application...\");\n}\npublic void run() {\nwhile(!stop) {\nSystem.out.println(\"Thread is running...\");\n}\nSystem.out.println(\"Thread exiting under request...\");\n}\n}', 'A. 调用interrupt()后线程停止\nB. interrupt()可以实现在线程受到阻塞时抛出一个中断信号\nC. 中断线程推荐使用stop()函数\nD. 线程会一直运行', 'D', '解析：\nhttp://3ms.huawei.com/km/blogs/details/8300387', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (938, '下列对sql注入防护措施中的转码描述正确的是', 'A. 转码是优选的sql注入防护措施\nB. 转码仅对拼接sql语句中，单引号或双引号限制的字段生效\nC. 在拼接sql语句前进行转码，可以彻底解决sql注入问题\nD. 转码对表名、字段等不适用于参数化查询的场景是优选的方案', 'B', '解析：\n对于转码，仅适用于sql语句中由单引号或双引号限制的字段。', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (939, '下列哪个场景可以使用java.util.Ramdom类产生的随机数', 'A. 随机选取路由\nB. 挑战算法中的随机数生成\nC. 验证码的随机数生成\nD. Web应用会话标识符', 'A', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (940, '下面代码中存在XML实体注入的是：', 'A. SAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser saxParser = factory.newSAXParser();\nsaxParser.parse(inStream, defaultHandler);\nB. public static String DDD = \"http://apache.org/xml/features/disallow-doctype-decl\";\npublic static String EGE = \"http://xml.org/sax/features/external-general-entities\";\npublic static String EPE = \"http://xml.org/sax/features/external-parameter-entities\";\npublic static String LED = \"http://apache.org/xml/features/nonvalidating/load-external-dtd\";\nSAXReader reader = new SAXReader();\nreader.setFeature(LED, false);\nreader.setFeature(EGE, false);\nreader.setFeature(EPE, false);\nC. XMLReader reader = saxParser.getXMLReader();\nreader.serEntityResolve(new CustomerResolver());\nreader.setErrorHandler(defaultHandler);\nD. DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\ndbf.setExpandEntityReferences(false)', 'A', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (941, '下面加密算法中，哪类属于不安全的加密算法', 'A. AES-GCM\nB. AES-ECB\nC. DES\nD. MD5', 'BCD', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (942, '下列操作中可导致任意代码执行的操作有哪些？', 'A. 使用不安全的XSLT转换XML文件\nB. 对不可信数据进行反序列化操作\nC. 使用不可信数据拼接sql语句\nD. 使用不可信数据拼接命令行', 'ABD', '解析：\nhttp://3ms.huawei.com/km/blogs/details/8905753', '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (943, '以下异常列表哪些属于敏感异常？', 'A. java.io.FileNotFoundException\nB. java.net.BindException\nC. java.util.ConcurrentModificationException\nD. java.sql.SQLException\nE. java.lang.NullPointerException\nF. java.lang.IllegalArgumentException', 'ABCD', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (944, '以下哪种攻击方式是针对XML数据应用', 'A. 外部实体注入(XXE)\nB. 内部实体扩展\nC. LDAP注入\nD. XPath注入', 'ABD', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (945, '在Java环境中，允许处于不同受信域的组件进行数据通信，从而出现跨受信边界的数据传输。以下哪种方式可以在一定程度上解决反序列化中的信息泄漏问题：', 'A. 将属性声明为final\nB. 将敏感数据声明为transient\nC. 将属性声明为private\nD. 特殊情况下正确加密了的数据可以被序列化', 'BD', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (946, '下列描述中，可能会产生死锁的是', 'A. 同步方法或使用对象内置锁的同步代码块中，直接抛出异常\nB. 异常条件下没有正确释放锁\nC. 两个或多个线程以不同的顺序请求和释放锁\nd. 在产生阻塞的操作中持有锁', 'BCD', '解析：\nhttp://3ms.huawei.com/km/blogs/details/5896699', '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (947, '请阅读下面的代码，分析代码中存在哪些安全风险：\nString password;\npassword = \"\";\nProperties properties = new Properties();\nFileInputSteam streamFileInput = null;\ntry {\nstreamFileInput = new FileInputSteam(\"../common/config.properties\");\nproperties.load(streamFileInput);\npassword = properties.getProperty(\"passport\");\nstreamFileInput.close();\n} catch (IOException exceptIO) {\nIO.logger.log(Level.WARNING, \"Error with stream reading\");\n}\nConnection dBConnection = null;\ntry {\ndBConnection = DriverManager.getConnection(\"192.168.105.23\", \"sa\", password);\n} catch (SQLException exceptSql) {\nIO.logger.log(Level.WARNING, \"Error with database connection\");\n}', 'A. 资源未正确释放\nB. 敏感异常导致信息泄漏\nC. sql注入\nD. 配置文件中明文保存密码', 'AD', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (948, '栈帧存储了哪些信息？', 'A. 方法的局部变量表\nB. 操作数栈\nC. 动态连接\nD. 方法返回地址', 'ABCD', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (950, 'gc主要回收的内存区域是哪块', 'A. 堆区\nB. 方法区', 'AB', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (951, '以下类型精度最高的是？', 'A. int\nB. long\nC. BigInteger\nD. byte', 'C', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (952, '下面语句运行结果为\nswitch (5) {\ndefault:\nSystem.out.println(5);\ncase 0:\nSystem.out.println(0);\ncase 1:\nSystem.out.println(1);\nbreak;\ncase 2:\nSystem.out.println(2);\nbreak;\n}', 'A. 501\nB. 1\nC. 0\nD. 5', 'A', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (953, '正则表达式，[^a-zA-Z0-9_]等价于', 'A. \\W   B. \\w   C. \\t   D.\\v', 'A', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (954, '如下操作属于中间结果的是', 'A. reduce()\nB. map()\nC. forEach()\nD. stream()', 'B', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (955, '以下代码执行结果为\nint count = 0;\nfor (int i = 0; i < 100; i++) {\ncount=count++;\n}\nSystem.out.println(count);', 'A. 0\nB. 100\nC. 1\nD. 99', 'A', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (956, '关于RandomAccessfile的说法错误的是？', 'A. 内部基于指针形式可以随机读写文件\nB. 可以通过RandomAccessFile的FileChannel间进行mmap操作\nC. RandomAccessFile继承InputStream和OutputStream\nD. RandomAccessFile只能对文件进行操作\nE. 支持r,rw,rws,rwd四种模式', 'C', '解析：\nRandomAccessFile父类：java.lang.Object。RandomAccessFile 虽然属于java.io下的类，但它不是InputStream或者OutputStream的子类；它也不同于FileInputStream和FileOutputStream。', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (957, '如下代码执行三次的结果\nFileOutputStream outputStream = new FileOutputStream(\"test.txt\", true);\noutputStream.write(\"ABCDE\".getBytes(StandardCharsets.UTF_8));\noutputStream.close();', 'A. ABCDE\nB. ABCDEABCDEACBDE\nC. 编译报错\nD. ABCDE\nABCDE\nABCDE', 'B', '解析：\nnew FileOutputStream构造器的第二个参数表示是否追加写入，如果为true，表示将文件内容追加到已存在文件，否则，覆盖掉已存在文件。', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (958, '为从文本文件中进行读取内容，应该使用哪个处理流文件', 'A. BufferedReader\nB. BufferedWriter\nC. BufferedInputStream\nD. BufferedOutputStream', 'A', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (960, '下面说法正确的是', 'A. FileChannel从文件读取数据，或将数据写入文件，无法设置为非阻塞模式\nB. DatagramChannel使用TCP协议通过网络来读写数据\nC. SocketChannel使用UDP协议通过网络来读写数据\nD. ServerSocketChannel可以监听新进来的TCP连接', 'AD', '解析：\nFileChannel无法设置为非阻塞模式，它总是运行在阻塞模式下。\nJava NIO中的DatagramChannel是一个能收发UDP包的通道。\nJava NIO中的SocketChannel是一个连接到TCP网络套接字的通道。', '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (961, '安全编程规范中，下面说法正确的有', 'A. 创建文件时指定合理的访问权限\nB. 对所有外部输入进行校验\nC. 记录日志时可以抛异常\nD. 禁止不受信任的代码直接终止JVM', 'ABD', '解析：\nhttp://3ms.huawei.com/km/blogs/details/5896699', '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (962, '以下说法正确的是', 'A. 临时文件由于会定期被清理掉，所以不用显示的清理临时文件\nB. java.nio包中的Buffer类定义了一系列方法，如wrap()、slice()、duplicate()，这些方法会创建一个新的buffer对象，修改这个新buffer对象不会导致原始的封装数据也被修改\nC. 运行一个外部进程时，如果此进程往其输出流发送任何数据，则必须将其输出流清空。类似的，如果进程会往其错误流发送数据，其错误流也必须被清空\nD. Java代码中常用的抽象方法Reader.read()方法用于从流中读取一个字节或字符，返回值的范围为0～65535，所以应定义char类型接收返回值', 'C', '解析：\n规则6.1 临时文件使用完毕必须及时删除\n规则6.2 禁止将Buffer对象封装的数据暴露给不可信代码\n规则6.3 防止让外部进程阻塞在输入输出流上\n规则6.4 对于从流中读取一个字符或字节的方法，使用int类型的返回值', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (963, '关于Java NIO网络编程说法错误的是？', 'A. NIO中的ServerSocketChannel可以同时监听TCP链接，每一个新来的链接都会创建一个SocketChannel\nB. Java NIO中的一个选择器只能注册一个通道\nC. NIO各种流是非阻塞的，如果没有数据可用也不会阻塞线程\nD. Java普通IO是面向流的，NIO是面向缓冲区的', 'B', '解析：\n一个选择器最多可以同时被63个通道一起注册使用。', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (964, '关于Linux的IO模型，说法错误的是', 'A. Linux的IO模型分为五种，阻塞IO，非阻塞IO，多路复用IO，信号驱动，异步IO\nB. 大部分高性能的IO中间件，如nignx，都是使用多路复用IO\nC. 多路复用IO没有一个线程需要被阻塞\nD. 多路复用IO依赖操作系统的能力，具体而言就是select/poll/epoll', 'C', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (965, 'Socket哪些操作可能会进入阻塞状态', 'A. server socket的accpet()监听客户端连接\nB. 执行socket的输出流写数据\nC. 执行socket的输入流读取数据\nD. Socket的getOutputStream()，getInputStream()', 'ABC', '解析：\n哪些Socket API会阻塞：\naccept、connect、recv(recvfrom)、send(sendto)、closesocket、select(poll或epoll)', '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (966, '如果一个对象存入Hash集合后hashcode随即发生变化，会导致什么结果？', 'A. 内存泄漏\nB. 无任何问题\nC. 内存溢出\nD. 抛出异常', 'A', '解析：\n如果一个对象存入Hash集合后hashcode随即发生变化，结果就是无法在集合内找到该对象，进而不能删除该对象，最终导致内存泄漏。', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (967, '下列运算不会溢出的是', 'A. Math.abs\nB. num++\nC. num%num1\nD. num/num1', 'C', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (968, '下面哪些可以编译成功？', 'A. float f = 10f;\nB. char c = 10.0;\nC. byte b = 10b;\nD. double d = 10;\nE. float f = 10.0;\nF. double d = 10.0;', 'ADF', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (969, '下面哪个是对的？', 'A. float f1 = 3.123\nB. char c1 = 1;\nC. int x = 1.0', 'B', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (970, '求平方根方法public static double sqrt(double a) 可以传递的参数类型有哪些？', 'A. \'\\n\'\nB. \"a\"\nC. \'\\u0012\'\nD. \'\\u12\'', 'ABD', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'MULTI_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (971, '以下代码的执行结果\nchar alpha = \'A\';\nint foo = 65;\nboolean trueExp = true;\nSystem.out.println(trueExp ? alpha : 0);\nSystem.out.println(trueExp ? alpha : foo);', 'A. A A\nB. 65 65\nC. A 65\nD. 65 A', 'C', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (972, '下列说法错误的是', 'A. ConcurrentHashMap不允许有null的key、value\nB. TreeMap可以有null的key、value\nC. ConcurrentHashMap是线程安全的\nD. HashMap线程不安全，但效率高', 'B', '解析：\nTreeMap键可以为\'null\'，值不允许', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (973, '下面描述正确的是', 'A. 多线程环境下使用CourrentHashMap和Collections. synchronizedMap实现同步效率差别不大\nB. Collections. synchronizedMap不是线程安全的\nC. 多线程环境下使用HashTable和Collections. synchronizedMap实现同步效率差别不大\nD. ConcurrentHashMap的锁粒度较大', 'C', NULL, '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
INSERT INTO `question`.`question` (`id`, `title`, `options`, `answer`, `parsing`, `remark`, `original_information`, `subject`, `q_type`, `hide_answer`, `doubtful`, `likeable`, `error_times`, `right_times`, `doubted_times`) VALUES (974, '以下对Java集合说法正确的是', 'A. 往一个ArrayList或者Vector里插入一个元素时，如果内部数组空间不够，ArrayList或Vector会扩展它的大小。Vector在默认情况下增长一倍的大小，而ArrayList增加50%的大小\nB. ArrayList、Vector、HashMap、StringBuilder和StringBuffer都是线程不安全的\nC. Vector类实现了一个动态数组，默认不传参数时，构造容量为16的大小，也可以传参指定容量大小；ArrayList就是动态的数组，默认不传参数时，构造容量为10的大小，也可以传参指定容量大小\nD. ConcurrentHashMap、HashMap、HashSet都不支持key为null，且遍历使用的都是Iterator迭代器，其中只有HashTable是线程安全的', 'A', '解析：\n1) 线程安全的集合：\nVector\nHashTable\nStringBuffer\nConcurrentHashMap\nStack\n2) 非线程安全的集合：\nArrayList\nLinkedList\nHashMap\nHashSet\nTreeMap\nTreeSet\nStringBulider\nLinkedHashSet\nLinkedHashMap\n3) DEFAULT_INITIAL_CAPACITY，比如ArrayList(默认10)、Vector(默认10)、StringBuilder(默认16)、StringBuffer(默认16)、HashMap(默认16)、HashSet(默认16)、XxxBlockingQueue(array的要手工指定，linked默认Integer.MAX_VALUE)等等。', '科目二来着熊绒的博客', NULL, '科目2', 'SINGLE_CHOICE', 1, 1, 0, 0, 0, 0);
UPDATE question  SET error_times=0,right_times=2,doubted_times=0  WHERE id=899;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=1151;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=912;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=882;
UPDATE question  SET error_times=2,right_times=0,doubted_times=0  WHERE id=81;
UPDATE question  SET error_times=0,right_times=0,doubted_times=1  WHERE id=81;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=903;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=916;
UPDATE question  SET error_times=0,right_times=0,doubted_times=1  WHERE id=916;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=1018;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=965;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=961;
UPDATE question  SET error_times=0,right_times=0,doubted_times=1  WHERE id=961;
UPDATE question  SET error_times=0,right_times=2,doubted_times=0  WHERE id=896;
UPDATE question  SET error_times=0,right_times=2,doubted_times=0  WHERE id=870;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=906;
UPDATE question  SET error_times=0,right_times=2,doubted_times=0  WHERE id=910;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=956;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=867;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=941;
UPDATE question  SET error_times=0,right_times=0,doubted_times=1  WHERE id=941;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=1014;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=911;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=964;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=894;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=1026;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=858;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=902;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=915;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=1003;
UPDATE question  SET error_times=0,right_times=0,doubted_times=1  WHERE id=1003;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=898;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=995;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=1030;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=875;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=905;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=985;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=942;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=986;
UPDATE question  SET title='以下有关Thread异常处理说法正确的是\n',options='A．子线程自身不必捕获异常，而是由主线程捕获即可\nB．对于运行时异常可调用Thread.setUncaughtExceptionHandler()方法设置运行时异常处理器来进行处理\nC．默认情况下，运行时异常从线程抛出时，会在控制台输出堆栈记录\nD．子线程须自己捕获异常处理\n',answer='BCD',remark='科目二来着熊绒的博客',subject='科目2',q_type='MULTI_CHOICE',hide_answer=0,likeable=0,doubtful=0,error_times=0,right_times=0,doubted_times=0  WHERE id=1023;
UPDATE question  SET error_times=0,right_times=2,doubted_times=0  WHERE id=908;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=966;
UPDATE question  SET error_times=0,right_times=3,doubted_times=0  WHERE id=852;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=895;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=904;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=960;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=1007;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=987;
UPDATE question  SET error_times=0,right_times=0,doubted_times=1  WHERE id=981;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=981;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=988;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=897;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=967;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=992;
UPDATE question  SET error_times=0,right_times=2,doubted_times=0  WHERE id=865;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=980;
UPDATE question  SET error_times=1,right_times=0,doubted_times=0  WHERE id=1039;
UPDATE question  SET error_times=0,right_times=1,doubted_times=0  WHERE id=1204;
